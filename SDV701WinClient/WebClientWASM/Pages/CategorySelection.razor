@page "/category"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using grpcCalls
@using SDV701common

<Styled @bind-Classname="@styleContainer">
    display: flex;
    height: 100%;
</Styled>

<Styled @bind-Classname="@navLinkStyle">
    margin:10px;
</Styled>




<Window Caption="Category selection" ErrorMSG="@lastError">
    <div class="@styleContainer">
        @foreach (var record in lst)
        {
            string navRoute = $"/categories/{@record.id}";
            <NavLink class="@navLinkStyle" href="@navRoute">
                <div class="max-w-sm rounded overflow-hidden shadow-lg hover:bg-gray-100">
                    <div class="px-6 py-4">
                        <div class="font-bold text-xl mb-2">@record.Categoryname</div>
                        <p class="text-gray-700 text-base">
                            @record.Description
                        </p>
                    </div>
                </div>
            </NavLink>
        }
    </div>
</Window>

@code {
    private string styleContainer;
    private string navLinkStyle;
    private string lastError = "";
    private List<Category> lst = new List<Category>();

    private async Task getNSaveLst(string hash)
    {
        lst = await gRPCClient.GetListOfCategories();
        await localStorage.SetItemAsync("catData", lst);
        await localStorage.SetItemAsync("catHash", hash);
    }

    protected override async void OnInitialized()
    {
        WebClientWASM.infrastructure.State.previousPage = "/";
        lastError = "";
        try
        {
            //await localStorage.SetItemAsync("name", "John Smith");
            string currentHash = await localStorage.GetItemAsync<string>("catHash");
            string hash = await gRPCClient.GetCategoriesHash();

            if (currentHash == hash)
            {
                //load from local
                try
                {
                    lst = await localStorage.GetItemAsync<List<Category>>("catData");
                    if (lst == null)
                        throw new Exception("Lst is empty");
                } catch
                {
                    await getNSaveLst(hash);
                }
            }
            else
            {
                await getNSaveLst(hash);
            }
            
        }
        catch (Exception e)
        {
            lastError = e.GetBaseException().Message;
        }
        this.StateHasChanged();
    }
}
